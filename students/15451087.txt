問題1 以下のストーリーをGit で再現する具体的な手順を述べよ。
1. hello.html を作る。
2. style.css を作る。
3. hello.html を更新する。
4. style.css を更新する。
5. hello.html の内容を1 のものに戻す。（style.css は戻さない。）
ヒント
1. SourceTree でGit リポジトリを新規作成する。
2. リポジトリの中に，hello.html とstyle.css を作る。
3. hello.html とstyle.css をIndex にステージする。
4. コミットする。（\Please tell me who you are." というエラーメッセージが出るときは，ツール→オプ
ションでデフォルトユーザ情報が設定されていることを確認する。）
5. hello.html とstyle.css をIndex にステージする。
6. コミットする。
7. master の最初のコミットを選択し，戻したいファイルhello.html を右クリック，リセットする。
1.3 チームで使う（書き込み権限がある場合）
問題2 GitHub にリポジトリを作り，以下のストーリーをGit で再現する具体的な手順を述べよ。
1.（アリス）hello.html を作り，リモートリポジトリに登録する。
2.（ボブ）リモートリポジトリのhello.html を更新する。（これが最新版になる。）
3.（アリス）手元にある最新版でないhello.html を更新し，リモートリポジトリに登録しようとする。
（失敗）
4.（アリス）リモートリポジトリからhello.html の最新版を取得し，自分の作業を反映させる。
5.（アリス）リモートリポジトリに登録する。（成功）
6.（ボブ）リモートリポジトリのhello.html を確認する。
ヒント
1. GitHub でリポジトリを作る。（ネットワーク上にGit リポジトリを置く必要がある。自分でサーバを
用意したくないなら，GitHub を使えばよい。GitHub のリポジトリの内容は公開されるため，パス
ワードなどの秘密の情報を掲載しないように注意すること。）
2. 登場人物が二人いるが，同一アカウントが，SourceTree で操作する場合と，ウェブブラウザで操作す
る場合を別人と見なせばよい（前者をアリス，後者をボブとする）。
3.（アリス）SourceTree の「新規/クローンを作成する」で地球儀アイコンをクリックし，リポジトリを
ローカルにクローンする。（GitHub のアカウント情報が正しくないと失敗する。失敗した場合は，「ア
カウントを編集」をクリックし，GitHub のアカウント情報を入力する。）
4.（アリス）ローカルでhello.html を作成し，コミットする。
5.（アリス）リモートにプッシュする。
6.（ボブ）ウェブブラウザでhello.html を更新する。
7.（アリス）ローカルでhello.html を更新し，コミットする。
8.（アリス）リモートにプッシュする。（失敗）
9.（アリス）リモートにからプルする。
10.（アリス）hello.html を修正し，コミットする。
11.（アリス）リモートにプッシュする。
12.（ボブ）ウェブブラウザでhello.html を確認する。
1.4 チームで使う2（書き込み権限がない場合）
問題3 リポジトリhttps://github.com/taroyabuki/2016prog のstudents に，「学生番号.txt」（例：
1234567.txt）というファイルを置くためのプルリクエストを実行せよ。
ヒント：書き込み権限のないリポジトリに変更を加えるための，「プルリクエスト」という方法がある。
1. リポジトリをFork する。（Fork したリポジトリには書き込める。）
2. ローカルにクローンする。
3. ファイルを追加し，コミットする。
4. リモートにプッシュする。
5. Fork したリポジトリにファイルがあることを，ウェブブラウザで確認する。
6.「New pull request」をクリックしてプルリクエストする。
7. プルリクエストが受け入れられると，リポジトリhttps://github.com/taroyabuki/2016prog に追
加したファイルが表れる。
2 プログラムを作ろう！
Python 関連のソフトウェアのパッケージ，Python 3 系列（本資料作成時は3.5）のAnaconda をインス
トールしてから問題を解くこと。
問題4 Python インタラクティブシェルを起動してみましょう。＊
問題5 シェルのようなキーボードで操作するインターフェースを，（ ）と呼びます。＊
問題6 Python インタラクティブシェルを使って，2 の10 乗を計算してみましょう。＊
問題7 5 / 2 と5 // 2 の違いを説明せよ。＊＊
問題8 ' あいうえお' の評価結果を調べよ。＊＊
問題9 次のプログラムをインタラクティブシェルで実行せよ。（このファイルからコピーするときは，Adobe
Reader を使うこと。他のソフトウェアでは，「'」が「’」に化ける危険がある。）
import random #モジュールの読み込み
data = ['goo','choki','pa'] #リストの作成
data_choice = random.choice(data) #ランダム選択
print(data_choice) #結果の表示
問題10 上は何をするプログラムか。
問題11 上のプログラムをjanken.py という名前で保存する（文字コードはUTF-8 にする）。これをコン
ソールで実行する方法を述べよ。
問題12 Python のスクリプトファイルの拡張子は，（ ）にするのが一般的です。＊
3 プログラムの材料と道具
問題13 データには型があります。1 は（ ）型，'abc' は（ ）型です。＊
問題14 apple = 100，orange = 60 のとき，apple * 3 + orange * 2 の結果を調べよ。orange = 120
とした後ではどうなるか。
問題15 コマンドプロンプトの編集機能について説明せよ。
問題16 0.1 + 0.1 + 0.1 の結果を調べよ。
問題17 Wolfram/Alpha で1/10 + 1/10 + 1/10 を計算せよ。
問題18 5 % 2 と5 ** 2 の結果を調べよ。これらは何を意味するか。
問題19 乗算と除算は加算と減算より優先度が高い。優先度を変えたいときは丸括弧() を使う。丸括弧を使
う例を作り，結果を確認せよ。
問題20 1 > 0.4 と1 < 0.4 の結果を調べよ。
問題21 1 <= 1 と1 >= 1 の結果を予想し，確認せよ。
問題22 1 == 1 と2 != 2 の結果を調べよ。
問題23 i = 3 とi += 2 の後のi の値を調べよ。+=の代わりに-=，*=，/=，%=，**=とした場合の結果も
調べよ。
問題24 len('tomorrow') という関数の呼び出しでは，文字列'tomorrow' は関数len の（ ）と呼ば
れ，結果として得られる整数の8 は（ ）と呼ばれます。＊
問題25 文字列'abcde' の長さ（文字数）と，リスト[0, 1, 2] の要素数を求めよ。
問題26 'abc' + 'xyz' の結果を調べよ。
問題27 文字列'Python' と変数x = 3.5 を使い，'Python 3.5' という文字列を作るにはどうすればよ
いか。
問題28 list(range(10)) とlist(range(1, 11)) の結果を調べよ。（引数が複数のときはカンマで区
切る。）＊＊
問題29 range 関数を使って，2 から始まって21 で終わる，長さ20 のリストを作ってみましょう。＊
問題30 あるデータ型だけが独自に持っている関数のことを，（ ）と呼びます。＊
問題31 次のプログラムの結果を調べよ。補足：「. 名前(...)」という形で利用する関数を「メソッド」と
呼ぶ。（文字列は「split(文字)」というメソッドを持っているというわけである。）
address = 'Tokyo,Japan'
address.split(',')
問題32 split(引数) の引数を上とは別の文字にして，その結果を調べよ。
問題33 address.index('T') やaddress.index('p') の結果を調べ，メソッド「index(文字)」の意味
を予想せよ。
問題34 文字列にはupper() というメソッドがある。このメソッドの動作を調べよ。
問題35 文字列が持つメソッドをhttp://docs.python.jp/3.5/library/stdtypes.html#string-methods
で確認せよ。
問題36 upper() と対になる働きのメソッドを見つけよ。
問題37 （オプショナル）(0.1).as_integer_ratio() の結果を調べよ。これは，0.1 の内部表現（2 進数）
が表す厳密な値（有理数）である。
問題38 （オプショナル） 3602879701896397
36028797018963968
を三つ足した結果をWolfram/Alpha で求めよ。
問題39 （オプショナル）0:1 の内部表現は(0.1).hex() で得られ，0x1.999999999999ap-4 とわかる
（先頭の0x は16 進数であることを示すプレフィックス）。これを10 進表記の有理数にするためには，
Wolfram/Alpha で(0x1999999999999a/16^13)2^-4 を計算すればよい。
問題40 （オプショナル）Python でふつうに使える円周率の最も正確な近似値は次のように得られる。これ
を10 進表記の有理数にせよ。（この数は10 進数で小数点以下15 桁まで採用した数よりも少し正確である。）
import math
math.pi #10 進表現
math.pi.hex() #内部表現
4 データと型のすべて
注意：以下の問題は，「日時」の操作に詳しくなるためのものではない。詳しくなりたいならhttp://docs.
python.jp/3.5/library/datetime.html を参照せよ。
問題41 次のコードの実行結果を参考に，2009 年1 月1 日が2008 年1 月1 日の何日後になるのかを調べよ
（わかりやすくするために，教科書のコードを修正している）。補足：date(2008,1,1) によって，date 型の
実体（インスタンス）が作られる。このような型名と同じ名前のメソッドのことを「初期化メソッド」と呼ぶ。
（「コンストラクタ」と呼ぶ言語が多い。）
#モジュールdatetima に含まれる型（date とdatetime）を使う。
from datetime import *
date_a = date(2008,1,1)
date_b = date(2008,1,5)
result = date_b - date_a
print(result)
問題42 上のコードに続いて「date_a.year」や「date_a.month」，「date_a.day」を実行した結果を調べ
よ。補足：このように，（メソッドとは異なり）丸括弧なしでアクセスされるデータを「属性」と呼ぶ。メソッ
ドと属性を合わせたものを「オブジェクト」と呼ぶ。
問題43 今日の日付がdate.today() で得られる。これを利用して，自分が何日生きたかを計算せよ。（問
題48 を参照）
問題44 date 型には，曜日を調べるメソッドweekday() がある。今日が何曜日か，2008 年1 月1 日が何曜
日かを調べよ。
問題45 date 型について，次のような図を描け。補足：このような図を「クラス図」と呼ぶ。この段階では
厳密なクラス図を描く必要はない。
date
属性1
属性2
  
メソッド1
メソッド2
  
問題46 （オプショナル）日時を表すdatetime 型のインスタンスは，datetime(1969, 7, 21, 5, 17, 40)
のように作る。これを利用して，1969 年7 月21 日5 時17 分40 秒から1970 年8 月22 日6 時18 分41 秒ま
での時間を調べよ。
問題47 （オプショナル）時刻を表すtime 型を使う例を作れ。
問題48 （オプショナル）date.today() やdatetime.now() の結果を調べよ。補足：このようにインスタ
ンス無しで使えるメソッドもある。
問題49 date 型の初期化メソッドを使って，日付を表現するデータを用意してみましょう。何日でもかまい
ませんが，今日がわかりやすいでしょう。＊
問題50 date 型が持っているメソッドを使って，今日の日付を表現するデータを用意してみましょう。＊
問題51 次のプログラムを参考にして，自分が何日生きたかを計算せよ。
from datetime import *
today = date.today()
birthday = date(2016, 5, 10)
life = today - birthday
print(life.days)
問題52 Python のモジュールと，そこに含まれるデータ型の関係を，「実際のモノ」でたとえる例を作って
みましょう（本文中で使われた果物や魚以外で）。＊
5 データの入れ物
問題53 複数のデータをひとまとめにする「リスト」の作成方法を確認せよ。
list_int = [0, 1, 2, 3]
print(list_int)
list_mix = [2, 1.732, 'test']
print(list_mix)
問題54 list_mix の2 番目の要素を取り出せ。（要素の順番は0 から数える。）
問題55 関数len を使ってリストの要素数が得られることを確認するプログラムを作れ。
問題56 list_int[-1] の結果を調べよ。
問題57 list_int の0 番目の要素を0 から􀀀1 に変更し，その結果を確認せよ。
問題58 list_int の1 番目（つまり1）の前に，「5」を挿入し，その結果を確認せよ。
問題59 list_int の1 番目の要素を削除し，その結果を確認せよ。（pop を使う。）
問題60 list_mix から'test' という要素を削除し，その結果を確認せよ。（remove を使う。）
問題61 list_int とlist_mix を連結した新しいリストを作り，list2 という名前を付けよ。その時，
list_int とlist_mix 自体は変化しないことを確認せよ。
問題62 list_int にlist_mix の全要素を追加せよ。（extend）を使う。
問題63 list_f = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] というリストの0 から3 番目までの要素
を取り出せ。その時，list_f 自体は変化しないことを確認せよ。
問題64 list_f の2 番目以降の要素からなるリストを作れ。
問題65 list_f の最初から4 番目までの要素からなるリストを作れ。
問題66 list_test = [4, 9, 3, -1, 0] というリストを逆順にせよ。補足：新しいリストができるので
はなく，リスト自体が変更される。
問題67 関数sorted を使って，list_test を小さい順に並び替えよ。このとき，list_test 自体は変化し
ないことを確認せよ。
問題68 メソッドsort を使って，list_test を小さい順に並び替えよ。このとき，list_test 自体が変化
することを確認せよ。
問題69 list_test を大きい順に並び替えよ。（これまでに学んだことの組み合わせでできる。）
問題70 list_os = ['windows','mac','linux','BeOS'] でメソッドsort を使った結果を調べよ。
list_os = ['Windows','Mac','linux','BeOS'] の場合はどうか。
問題71 （オプショナル）list_os = ['Windows','Mac','linux','BeOS'] をアルファベット順に並び
替えよ。
問題72 リストのメソッドappend の機能がわかる例を作れ。（空のリスト[] から始めるとよい。）
問題73 リストにも，いろいろなメソッドがあります。要素を追加するときは（ ）が使われ，要素を昇
順に並べ替えるには（ ）を使います。（ ）を使うと，リストの並びが逆順になります。＊
問題74 インタラクティブシェルで空っぽのリストを作り，適当な要素を追加してみましょう。1，2，3
や'a'，'b'，'c' など，簡単な要素で構いません。＊
問題75 リストの要素を削除するメソッドに，remove があります。あるリストに同じ要素が2 個以上あると
き，remove を使うとどうなるのでしょうか？ ＊
問題76 次のように振る舞うオブジェクトcountry_code を作れ。（キーと値の組を記録する「辞書型」を
使う。）
>>> country_code[1]
'America'
>>> country_code[39]
'Italia'
>>> country_code[86]
'China'
問題77 「81 in country_code」と「39 in country_code」の結果を調べよ。
問題78 country_code[81] = 'Japan' を実行する前後の，print(country_code) の結果を調べよ。
問題79 country_code[81] = 'Nippon' を実行した後の，print(country_code) の結果を調べよ。
問題80 country_code[1] = 'Nippon' を実行した後の，print(country_code) の結果を調べよ。
問題81 country_code.pop(1) を実行する前後の，print(country_code) の結果を調べよ。
問題82 空の辞書{}から始めて，{'orange': 140, 'apple': 100}を作れ。
問題83 空っぽの辞書を作って，適当な要素を追加してみましょう。'a'，'b'，'c' のそれぞれに，'A'，
'B'，'C' を対応させるような簡単なもので構いません。＊
問題84 (1, 2, 3, '100 yen') というデータに名前を付け，リストと同じように扱えるか調べよ。補足
[] で作るリストと，() で作る「タプル」の大きな違いは，リストのサイズは可変なのに対して，タプルのサ
イズは不変であること。細かい注意：長さ1 のタプルは(2,) のようにカンマを付けて作る。
問題85 前問で作ったタプルをリストに変換せよ。
問題86 set() や||で作った「セット」に名前を付け，1，2，3 を要素として追加し，最終結果をprint
で確認せよ。（要素の追加にはadd を使う。）＊＊
問題87 前問で作ったセットに「2」が入っているかどうかを調べよ。「10」はどうか。
問題88 前問のセットをリストから作れ。
問題89 複数のデータをひとまとめにする方法を四つ挙げよ。
